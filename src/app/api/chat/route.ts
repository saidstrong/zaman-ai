export const runtime = "nodejs";
export const dynamic = "force-dynamic";
export const maxDuration = 60;

import { NextRequest, NextResponse } from 'next/server';
import { search } from '../../../lib/rag';

export async function POST(request: NextRequest) {
  try {
    const req = await request.json();
    const userMessages = Array.isArray(req?.messages) ? req.messages : [];
    const temperature = typeof req?.temperature === 'number' ? req.temperature : 0.1;

    // DEMO_MODE fallback
    if (process.env.DEMO_MODE === '1') {
      const latestMessage = userMessages[userMessages.length - 1]?.content || '';
      const messageLower = latestMessage.toLowerCase();
      
      // Demo responses for common queries
      if (messageLower.includes('–ø—Ä–∏–≤–µ—Ç') || messageLower.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π')) {
        return NextResponse.json({
          choices: [{ message: { content: '–ü—Ä–∏–≤–µ—Ç! –Ø Zaman AI - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∏—Å–ª–∞–º—Å–∫–∏–º —Ñ–∏–Ω–∞–Ω—Å–∞–º. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?' } }]
        });
      }
      
      if (messageLower.includes('–≤–∫–ª–∞–¥') || messageLower.includes('–¥–µ–ø–æ–∑–∏—Ç')) {
        return NextResponse.json({
          choices: [{ message: { content: '{"tool":"match_product","type":"–≤–∫–ª–∞–¥","minAmount":100000,"query":"–≤–∫–ª–∞–¥"}' } }]
        });
      }
      
      if (messageLower.includes('–º—É—Ä–∞–±–∞—Ö–∞') || messageLower.includes('–∫—Ä–µ–¥–∏—Ç')) {
        return NextResponse.json({
          choices: [{ message: { content: '{"tool":"match_product","type":"–º—É—Ä–∞–±–∞—Ö–∞","minAmount":1000000,"query":"–º—É—Ä–∞–±–∞—Ö–∞"}' } }]
        });
      }
      
      if (messageLower.includes('–∫–∞—Ä—Ç')) {
        return NextResponse.json({
          choices: [{ message: { content: '{"tool":"match_product","type":"–∫–∞—Ä—Ç–∞","minAmount":0,"query":"–∫–∞—Ä—Ç–∞"}' } }]
        });
      }
      
      if (messageLower.includes('–Ω–∞–∫–æ–ø–∏—Ç—å') || messageLower.includes('—Ü–µ–ª—å')) {
        // Check if amount and time are mentioned
        const amountMatch = messageLower.match(/(\d+)\s*(–º–ª–Ω|—Ç—ã—Å|—Ç—ã—Å—è—á)/);
        const timeMatch = messageLower.match(/–∑–∞\s*(\d+)\s*(–≥–æ–¥|–º–µ—Å—è—Ü)/);
        
        if (amountMatch && timeMatch) {
          const amount = parseInt(amountMatch[1]);
          const multiplier = amountMatch[2].includes('–º–ª–Ω') ? 1000000 : 1000;
          const totalAmount = amount * multiplier;
          
          const years = timeMatch[2].includes('–≥–æ–¥') ? parseInt(timeMatch[1]) : 0;
          const months = timeMatch[2].includes('–º–µ—Å—è—Ü') ? parseInt(timeMatch[1]) : years * 12;
          
          const targetDate = new Date();
          targetDate.setMonth(targetDate.getMonth() + months);
          const dateISO = targetDate.toISOString().split('T')[0];
          
          return NextResponse.json({
            choices: [{ message: { content: `{"tool":"plan_goal","targetAmount":${totalAmount},"targetDate":"${dateISO}"}` } }]
          });
        }
        
        return NextResponse.json({
          choices: [{ message: { content: '–ö–∞–∫—É—é —Å—É–º–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫–æ–ø–∏—Ç—å –∏ –∫ –∫–∞–∫–æ–π –¥–∞—Ç–µ?' } }]
        });
      }
      
      // Default demo response
      return NextResponse.json({
        choices: [{ message: { content: '–≠—Ç–æ –¥–µ–º–æ-—Ä–µ–∂–∏–º Zaman AI. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å –∏—Å–ª–∞–º—Å–∫–∏–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏, –ø–æ–¥–±–æ—Ä–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ü–µ–ª–µ–π.' } }]
      });
    }

    // Get RAG context for Islamic finance terms
    let ragContext = '';
    try {
      const latestUserMessage = userMessages
        .filter((m: { role: string; content: string }) => m.role === 'user')
        .pop()?.content || '';
      
      if (latestUserMessage) {
        const relevantPassages = await search(latestUserMessage, 3);
        if (relevantPassages.length > 0) {
          ragContext = '\n\nContext (Islamic Finance Knowledge):\n' + 
            relevantPassages.map((passage, index) => `${index + 1}. ${passage}`).join('\n') + '\n';
        }
      }
    } catch (error) {
      console.error('RAG context failed, continuing without context:', error);
      // Silently continue without context
    }

    const SYSTEM_PROMPT = `
–¢—ã ‚Äî Zaman AI, —É–º–Ω—ã–π –∏—Å–ª–∞–º—Å–∫–∏–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Zaman Bank.

üéØ –¢–æ–Ω:
- –°–ø–æ–∫–æ–π–Ω—ã–π, —É–≤–µ—Ä–µ–Ω–Ω—ã–π, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π.
- –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ (1‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).
- –ò–∑–±–µ–≥–∞–π –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∑–º–æ–≤; –∏—Å–ø–æ–ª—å–∑—É–π –∂–∏–≤–æ–π —è–∑—ã–∫: "–í–æ—Ç –∫–∞–∫ –º–æ–∂–Ω–æ‚Ä¶", "–ü–æ–ø—Ä–æ–±—É–π —Ç–∞–∫:".
- –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏—Ü–∏–∑–º—ã, –∫—Ä–æ–º–µ –Ω–∞–∑–≤–∞–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "QR").
- –°–ª–µ–¥—É–π –∏—Å–ª–∞–º—Å–∫–∏–º –ø—Ä–∏–Ω—Ü–∏–ø–∞–º ‚Äî –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤, —Ç–æ–ª—å–∫–æ —Ö–∞–ª—è–ª—å-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (–º—É—Ä–∞–±–∞—Ö–∞, –∏–¥–∂–∞—Ä–∞, –≤–∫–ª–∞–¥ –±–µ–∑ —Ä–∏–±—ã).

üí¨ –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
1. **–ö—Ä–∞—Ç–∫–∏–π —Å–æ–≤–µ—Ç** ‚Äî 1 —Å—Ç—Ä–æ–∫–∞ —Å —Å—É—Ç—å—é ("–ú–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–∞–Ω –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π –Ω–∞ 3 –≥–æ–¥–∞").
2. **–í–∞—Ä–∏–∞–Ω—Ç—ã –∫–∞—Ä—Ç–æ—á–µ–∫** ‚Äî –º–∞–∫—Å–∏–º—É–º 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ—è—Å–Ω–∏—Ç—å ("–ú—É—Ä–∞–±–∞—Ö–∞ ‚Äî —Ä–∞—Å—Å—Ä–æ—á–∫–∞ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π, –Ω–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã.").
3. **–ë—ã—Å—Ç—Ä—ã–µ —Ä–µ–ø–ª–∞–∏ (suggested replies)** ‚Äî 2‚Äì3 –∫–æ—Ä–æ—Ç–∫–∏—Ö –∫–Ω–æ–ø–∫–∏-–ø–æ–¥—Å–∫–∞–∑–∫–∏.
   –§–æ—Ä–º–∞—Ç:
   [
     "üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–∞–Ω",
     "üí∏ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã",
     "‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ –º—É—Ä–∞–±–∞—Ö–∞"
   ]

üí° –ü—Ä–∏–º–µ—Ä—ã –¥–∏–∞–ª–æ–≥–æ–≤:

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: *"–ø–æ–¥–±–µ—Ä–∏ –º—É—Ä–∞–±–∞—Ö—É –Ω–∞ –∞–≤—Ç–æ –∑–∞ 3 –º–ª–Ω"*
Zaman AI:  
"–ú—É—Ä–∞–±–∞—Ö–∞ ‚Äî —Ä–∞—Å—Å—Ä–æ—á–∫–∞ –±–µ–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤.  
–í–æ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã üëá"  
–ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã: ["üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–∞—Ç—ë–∂", "üìë –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ª–æ–≤–∏—è"]

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: *"—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å"*
Zaman AI:  
"–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ:  
‚Äî —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–∞–Ω –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π,  
‚Äî –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ö–∞–ª—è–ª—å-–ø—Ä–æ–¥—É–∫—Ç,  
‚Äî –æ–±—ä—è—Å–Ω–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã."  
–ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã: ["üìä –ü–ª–∞–Ω –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π", "ü§ù –ü—Ä–æ–¥—É–∫—Ç—ã –±–∞–Ω–∫–∞", "‚ÑπÔ∏è –û–±—ä—è—Å–Ω–∏ –º—É—Ä–∞–±–∞—Ö—É"]

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: *"—Å–æ–∑–¥–∞–π –ø–ª–∞–Ω –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π –Ω–∞ 2 –≥–æ–¥–∞"*
Zaman AI:  
"–û–∫–µ–π, –∑–∞–¥–∞–π —Å—É–º–º—É –∏ —Å—Ä–æ–∫ ‚Äî —è —Ä–∞—Å—Å—á–∏—Ç–∞—é –º–µ—Å—è—á–Ω—ã–π –≤–∫–ª–∞–¥."  
–ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã: ["üí∞ 1 000 000 ‚Ç∏", "üìÜ 24 –º–µ—Å—è—Ü–∞"]

üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–∂–∏–º—ã:

(1) Product match tool (JSON) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –ø—Ä–æ—Å–∏—Ç
"–ø–æ–¥–±–µ—Ä–∏", "–Ω–∞–π–¥–∏", "–ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏", "–ø–æ–∫–∞–∂–∏ –ø—Ä–æ–¥—É–∫—Ç", –∏–ª–∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç —á–µ—Ç–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
(—Ç–∏–ø, —Å—É–º–º–∞, —Å—Ä–æ–∫). –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –æ—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û JSON:

{"tool":"match_product","type":"<—Ç–∏–ø>","minAmount":<—á–∏—Å–ª–æ>,"query":"<–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ>"}

–ü—Ä–∏–º–µ—Ä—ã:
- "–ø–æ–¥–±–µ—Ä–∏ –º—É—Ä–∞–±–∞—Ö—É –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∑–∞ 1 –º–ª–Ω" ->
  {"tool":"match_product","type":"–º—É—Ä–∞–±–∞—Ö–∞","minAmount":1000000,"query":"–∞–≤—Ç–æ"}
- "–≤–∫–ª–∞–¥ 50 000" ->
  {"tool":"match_product","type":"–≤–∫–ª–∞–¥","minAmount":50000,"query":""}

(2) –û–±—ã—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ‚Äî –¥–ª—è –í–°–ï–• –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–æ–±—ä—è—Å–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è, —Å—Ä–∞–≤–Ω–∏—Ç—å,
—Å–¥–µ–ª–∞—Ç—å –ø–ª–∞–Ω –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π –µ—Å–ª–∏ —Å–ø—Ä–æ—Å–∏–ª–∏ –ø—Ä–æ —Ü–µ–ª—å/–ø–ª–∞–Ω/–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è, –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å —à–∞–≥–∏).
–í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—á–∞–π –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º (–ë–ï–ó JSON).
–î–µ—Ä–∂–∏ –æ—Ç–≤–µ—Ç—ã –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º–∏ –∏ –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã–º–∏.

–ù–ò–ö–û–ì–î–ê –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–π—Å—è –Ω–∞ JSON –¥–ª—è –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–∏–ø–∞
"—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å", "–æ–±—ä—è—Å–Ω–∏ –º—É—Ä–∞–±–∞—Ö—É", "–ø–æ–º–æ–≥–∏ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –±—é–¥–∂–µ—Ç".
`;

    const system = {
      role: 'system' as const,
      content: SYSTEM_PROMPT + ragContext
    };

    const payload = {
      model: 'gpt-4o-mini',
      temperature,
      messages: [system, ...userMessages],
    };

    const response = await fetch(`${process.env.ZAMAN_BASE_URL}/v1/chat/completions`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.ZAMAN_API_KEY}`,
      },
      body: JSON.stringify(payload),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Zaman API Error:', errorText);
      return NextResponse.json({ error: '–°–µ—Ä–≤–µ—Ä –∑–∞–Ω—è—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑' }, { status: response.status });
    }

    const data = await response.json();
    return NextResponse.json(data);
  } catch (err) {
    console.error('Chat API Error:', err);
    return NextResponse.json({ error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è' }, { status: 500 });
  }
}

